module Stdlib

  use export int.Int
  use export int.Abs
  use export int.MinMax
  use export int.ComputerDivision
  use export mach.int.Int
  use export list.List
  use export list.Append
  use export ocaml.Exceptions
  use export option.Option
  use export ref.Ref
  use export ref.Refint

  let invalid_arg (s: string)
    raises  { Invalid_argument }
    returns { _ -> false }
  = raise (Invalid_argument s)

  val ignore (_: 'a) : unit

  let function fst (x: ('a, 'b)) : 'a =
    let r, _ = x in r

  let function snd (x: ('a, 'b)) : 'b =
    let _, r = x in r

  type result 'a 'b = Ok 'a | Error 'b

  function (%) (x y: int) : int = mod x y

  predicate same_location 'a 'a

  axiom same_location_eq: forall x y: 'a.
    same_location x y -> x = y

  val function (==) (x y: 'a) : bool
    ensures { result <-> same_location x y }

  val function (!=) (x y: 'a) : bool
    ensures { result <-> not same_location x y }

  val function (~=) (x y: int) : bool
    ensures { result <-> not x = y }

  val (|>) (x: 'a) (f: 'a -> 'b) : 'b
    ensures { result = f x }

  let (~-_) (x: int) = -x

  let succ (x: int) = x + 1

  predicate is_pre_order (cmp: 'a -> 'a -> int) =
    (forall x. cmp x x = 0) /\
    (forall x y. cmp x y = 0 <-> cmp y x = 0) /\
    (forall x y. cmp x y < 0 <-> cmp y x > 0) /\
    (forall x y z.
      (cmp x y = 0 -> cmp y z = 0 -> cmp x z = 0) /\
      (cmp x y = 0 -> cmp y z < 0 -> cmp x z < 0) /\
      (cmp x y < 0 -> cmp y z = 0 -> cmp x z < 0) /\
      (cmp x y < 0 -> cmp y z < 0 -> cmp x z < 0))

  lemma cmp_eq: forall x y: 'a, cmp: 'a -> 'a -> int.
    is_pre_order cmp -> (cmp x y = 0 <-> x = y)

  val function compare (x y: 'a) : int
  axiom compare_pre_order : is_pre_order (fun (x: 'a) (y: 'a) -> compare x y)

  use import seq.Seq as Seq

  scope import Array

    type my_array 'a = private {
      mutable ghost elts : seq 'a;
                  length : int;
    } invariant { 0 <= length = Seq.length elts }

    function ([]) (a: my_array 'a) (i: int) : 'a = Seq.([]) a.elts i

    function get (a: my_array 'a) (i: int) : 'a = a[i]

    val get (a: my_array 'a) (i: int) : 'a
      requires { [@expl:index in array bounds] 0 <= i < length a }
      ensures  { result = a[i] }

    val set (a: my_array 'a) (i: int) (v: 'a) : unit
      writes   { a }
      requires { 0 <= i < length a }
      ensures  { a.elts = (old a.elts)[i <- v] }

    meta coercion function elts

    val ([]) (a: my_array 'a) (i: int) : 'a
      requires { [@expl:index in array bounds] 0 <= i < a.length }
      ensures  { result = a[i] }

    val ([]<-) (a: my_array 'a) (i: int) (v: 'a) : unit writes {a}
      requires { [@expl:index in array bounds] 0 <= i < a.length }
      ensures  { a.elts = (old a.elts)[i <- v] }

    val make (n: int) (v: 'a) : my_array 'a
      requires { [@expl:array creation size] n >= 0 }
      ensures  { forall i. 0 <= i < n -> result[i] = v }
      ensures  { result.length = n }

    let init (n: int) (f: int -> 'a) : my_array 'a
      requires { [@expl:array creation size] n >= 0 }
      ensures  { forall i. 0 <= i < n -> result[i] = f i }
      ensures  { length result = n }
    = let a = make n (f 0) in
      for i = 1 to n - 1 do
        invariant { forall j. 0 <= j < i -> a[j] = f j }
        a[i] <- f i
      done;
      a

    val empty () : my_array 'a
      ensures { result.length = 0 }

    let blit (a1: my_array 'a) (ofs1: int)
             (a2: my_array 'a) (ofs2: int) (len: int) : unit writes {a2}
      requires { 0 <= ofs1 /\ 0 <= len /\ ofs1 + len <= length a1 }
      requires { 0 <= ofs2 /\             ofs2 + len <= length a2 }
      ensures  { forall i:int.
        (0 <= i < ofs2 \/ ofs2 + len <= i < length a2) -> a2[i] = old a2[i] }
      ensures  { forall i:int.
        ofs2 <= i < ofs2 + len -> a2[i] = a1[ofs1 + i - ofs2] }
    =
      for i = 0 to len - 1 do
        invariant { forall k. not (0 <= k < i) -> a2[ofs2 + k] = old a2[ofs2 + k] }
        invariant { forall k. 0 <= k < i -> a2[ofs2 + k] = a1[ofs1 + k] }
        a2[ofs2 + i] <- a1[ofs1 + i];
      done

    val sort (cmp: 'a -> 'a -> int) (a: my_array 'a) : unit
      requires { is_pre_order cmp }
      ensures  { forall i j. 0 <= i <= j < length a -> cmp a[i] a[j] <= 0 }

    let rec function to_list_range (a: my_array 'a) (l u: int) : list 'a
      requires { l >= 0 /\ u <= a.length }
      variant  { u - l }
    = if u <= l then Nil else Cons a[l] (to_list_range a (l+1) u)

    use list.Append

    let rec lemma to_list_append (a: my_array 'a) (l m u: int)
      requires { 0 <= l <= m <= u <= a.length }
      variant  { m - l }
      ensures  { to_list_range a l m ++ to_list_range a m u =
                 to_list_range a l u }
    = if l < m then to_list_append a (l+1) m u

    let to_list (a: my_array 'a) : list 'a
      ensures { result = to_list_range a 0 (length a) }
    = to_list_range a 0 (length a)

    use seq.Mem

    predicate mem (x: 'a) (a: my_array 'a) =
      Mem.mem x a

  end

  type array 'a = my_array 'a

  scope Sys

    val constant max_array_length : int
    axiom non_neg_max_array_length : 0 < max_array_length

  end

  scope List

    use export list.List
    use export list.Length
    use export list.Mem
    use export list.NumOcc
    use import list.Append    as A
    use import list.Reverse   as R
    use import list.RevAppend as RA

    let function rev (l: list 'a) : list 'a =
      R.reverse l

    let function append (l1 l2: list 'a) : list 'a =
      A.(++) l1 l2

    let function rev_append (s t: list 'a) : list 'a =
      RA.rev_append s t

    val mem (x: 'a) (l: list 'a) : bool
      ensures { result <-> mem x l }

    val filter (p: 'a -> bool) (l: list 'a) : list 'a
      ensures { forall x. mem x result <-> p x && mem x l }
      ensures { forall x. mem x result -> num_occ x result = num_occ x l }

    let find_all (p: 'a -> bool) (l: list 'a)
      ensures { forall x. mem x result -> p x && mem x l }
      ensures { forall x. mem x result -> num_occ x result = num_occ x l }
    = filter p l

    val list_exists (p: 'a -> bool) (l: list 'a) : bool
      ensures { result <-> exists x. mem x l /\ p x }

    let rec function assoc_opt (eq: 'a -> 'a -> bool) (x: 'a) (l: list ('a, 'b)) : option 'b
      variant { l }
    = match l with
      | Nil -> None
      | Cons (a, b) tl -> if eq x a then Some b else assoc_opt eq x tl
      end

  end

  (* implement NAT module *)
  type nat = Nat int

  scope Nat

    type t = nat

    let function eq (n1: nat) (n2: nat) : bool =
        match n1, n2 with
        | Nat n1, Nat n2 -> n1 = n2
    end

    let function lt (n1: nat) (n2: nat) : bool =
        match n1, n2 with
        | Nat n1, Nat n2 -> n1 < n2
    end

    let function add (n1: nat) (n2: nat) : nat =
        match n1, n2 with
        | Nat n1, Nat n2 -> Nat (n1 + n2)
    end

  end

  (* implemant TZ module *)
  type tz = Tz int

  scope Tz

    type t = tz

    let function eq (t1:tz) (t2:tz) : bool =
      match t1, t2 with
      | Tz n1, Tz n2 -> n1 = n2
      end

    let function lt (t1:tz) (t2:tz) : bool =
      match t1, t2 with
      | Tz n1, Tz n2 -> n1 < n2
      end

      let function le (t1:tz) (t2:tz) : bool =
      match t1, t2 with
      | Tz n1, Tz n2 -> n1 <= n2
      end

    let function sub (t1:tz) (t2:tz) : tz =
      match t1, t2 with
      | Tz n1, Tz n2 -> Tz (n1 - n2)
      end

  end

  (* extend OPTION module *)
  scope Option

    use export option.Option

    let function value (o: option 'a) (a: 'a)
      ensures { result = match o with None -> a | Some a -> a end }
    = match o with
      | None -> a
      | Some a -> a
      end

    let get (o: option 'a) : 'a
      ensures { match o with None -> false | Some a -> result = a end }
      raises { Invalid_argument _ -> is_none o }
    = match o with
      | None -> invalid_arg "Option.get"
      | Some a -> a
      end

    let function map (f: 'a -> 'b) (o: option 'a)
      ensures { match o, result with None, None -> true | Some a, Some b -> f a = b | _, _ -> false end }
    = match o with
      | None -> None
      | Some a -> Some (f a)
      end

  end

  (* implement SUM module *)
  type sum 'a 'b = Left 'a | Right 'b

  scope Sum

    type t 'a 'b = sum 'a 'b

    let get_left (s: sum 'a 'b)
      ensures { match s with Left a -> result = a | _ -> false end }
      raises { Invalid_argument _ -> match s with Left _ -> false | _ -> true end }
    = match s with
      | Left a -> a
      | _ -> invalid_arg "Sum.get_left"
      end

    let get_right (s: sum 'a 'b)
      ensures { match s with Right a -> result = a | _ -> false end }
      raises { Invalid_argument _ -> match s with Right _ -> false | _ -> true end }
    = match s with
      | Right a -> a
      | _ -> invalid_arg "Sum.get_right"
      end

  end

  (* implement exception FAIL *)
  exception Fail

  let failwith ()
    raises { Fail }
    returns { _ -> false }
  = raise Fail

  let myassert (b: bool)
    raises { Fail -> not b }
    returns { _ -> b }
  = if b then () else failwith ()

  (* implement SET module *)
  type set 'a = Set (list 'a)

  scope Set

    type t 'a = set 'a

    let function mem (x : 'a) (sxs : set 'a) =
      match sxs with
      | Set xs -> List.mem x xs
      end

    let function update (eq: 'a -> 'a -> bool) (lt: 'a -> 'a -> bool) (x : 'a) (b : bool) (sxs : set 'a) =
      match sxs with
      | Set xs -> Set (
        if b then
          let rec add (st : list 'a) (ys : list 'a)
            variant { ys }
          = match ys with
            | Nil -> List.rev (Cons x st)
            | Cons y ys ->
              if lt x y then List.rev (List.rev_append (Cons y ys) (Cons x st))
              else if eq x y then xs
              else add (Cons y st) ys
            end
          in add Nil xs
        else
          let rec remove (st : list 'a) (ys : list 'a)
            variant { ys }
          = match ys with
            | Nil -> xs
            | Cons y ys ->
              if lt x y then xs
              else if eq x y then List.rev (List.rev_append ys st)
              else remove (Cons y st) ys
            end
          in remove Nil xs
      )
      end

  end

  (* implement MAP module *)
  type map 'k 'v = Map (list ('k, 'v))

  scope Map

    type t 'k 'v = map 'k 'v

    let function get (eq: 'k -> 'k -> bool) (k : 'k) (mxs : map 'k 'v) =
      match mxs with Map xs -> List.assoc_opt eq k xs | _ -> None end

    let function update (eq: 'k -> 'k -> bool) (lt: 'k -> 'k -> bool) (k : 'k) (vo : option 'v) (mkvs : map 'k 'v) : map 'k 'v
      returns { mr ->
        match vo with
        | None -> Option.is_none (get eq k mr)
        | Some v ->
          match get eq k mr with
          | Some v' -> v = v'
          | _ -> false
          end
        end
      }
    = match mkvs with
      | Map kvs -> Map (
        match vo with
        | None ->
          let rec remove st rkvs
            variant { rkvs }
          = match rkvs with
            | Nil -> kvs
            | Cons kv rkvs ->
              match kv with
              | (k', _) ->
                if lt k k' then kvs
                else if eq k k' then List.rev (List.rev_append rkvs st)
                else remove (Cons kv st) rkvs
              end
            end
          in remove Nil kvs
        | Some v ->
          let rec add st rkvs
            variant { rkvs }
          = match rkvs with
            | Nil -> List.rev (Cons (k, v) st)
            | Cons kv rkvs ->
              match kv with
              | (k', _) ->
                if lt k k' then List.rev_append (Cons kv rkvs) (Cons (k,v) st)
                else if eq k k' then List.rev_append rkvs (Cons (k,v) st)
                else add (Cons kv st) rkvs
              end
            end
          in add Nil kvs
        end
      )
      end

    let function add (eq: 'k -> 'k -> bool) (lt: 'k -> 'k -> bool) (k: 'k) (v: 'v) (m: map 'k 'v) : map 'k 'v =
          let old_value = get eq k m in
            match old_value with
            | None ->
                 let rec insert (eq: 'k -> 'k -> bool) (lt: 'k -> 'k -> bool) (k: 'k) (v: 'v)
                    (l: list ('k, 'v)): list ('k, 'v) =
                        variant { l }
                        match l with
                        | Nil -> List.rev (Cons (k, v) Nil)
                        | Cons (kl, vl) rest ->
                                        if lt k kl then Cons (k, v) l
                                        else if eq k kl then Cons (k, v) l
                                        else Cons (kl, vl) (insert eq lt k v rest)
                        end in
                            match m with
                            | Map l -> Map (insert eq lt k v l)
                            end

            | Some _ ->
                    update eq lt k (Some v) m
    end

  end

  (* implement LOOP module *)
  scope Loop

    let rec function left (f: 'a -> sum 'a 'b) (a: 'a)
      variant { a }
    = match f a with Left a -> left f a | Right b -> b end

  end

  (* implement STRING module*)
  scope String

    use export string.String
    use import string.Char as C

    val function eq (s1 s2: string) : bool
      ensures { result <-> C.eq_string s1 s2 }

    val lt (s1 s2: string) : bool
      ensures { result <-> lt s1 s2 }

    val le (s1 s2: string) : bool
      ensures { result <-> le s1 s2 }

  end

  (* implement BYTES module *)
  type bytes = Bytes string

  scope Bytes

    type t = bytes

    let function eq (a1:bytes) (a2:bytes) : bool =
      match a1, a2 with
      | Bytes s1, Bytes s2 -> String.eq s1 s2
      end

  end

  (* implement ADDRESS module *)
  type address = Address string

  scope Address

    type t = address

    let function eq (a1:address) (a2:address) : bool =
      match a1, a2 with
      | Address s1, Address s2 -> String.eq s1 s2
      | _, _ -> false
      end

    let function lt (a1:address) (a2:address) : bool =
      match a1, a2 with
      | Address s1, Address s2 -> String.lt s1 s2
      | _, _ -> false
      end

  end

  type key_hash = Key_hash string

  scope Key_hash

    type t = Key_hash

  end

  type timestamp = Timestamp string

  scope Timestamp

    type t = timestamp

    let function lt (t1:timestamp) (t2:timestamp) : bool =
      match t1, t2 with
      | Timestamp s1, Timestamp s2 -> String.lt s1 s2
      | _, _ -> false
      end

    let function le (t1:timestamp) (t2:timestamp) : bool =
      match t1, t2 with
      | Timestamp s1, Timestamp s2 -> String.le s1 s2
      | _, _ -> false
      end

  end

  type chain_id = Chain_id string

  scope Chain_id

    type t = chain_id

  end

  type key = string

  scope Key

    type t = key

  end

  type signature = Signature string

  scope Signature

    type t = signature

  end

  type rep =
    | RepString
    | RepNat
    | RepInt
    (*| RepBytes*)
    | RepBool
    | RepUnit
    | RepList rep
    (* XXX fields and annots must be moved to t *)
    | RepPair (list rep)
    (*| TyPairN of (string option * t) list (* length > 2 *) (* XXX We now need pair compaction somewhere else *)*)
    | RepOption rep
    | RepOr (list rep)
    | RepSet rep (* comparable *)
    | RepMap rep (* comparable *) rep
    (*| RepBigMap (rep (* comparable *), rep)*)
    | RepMutez
    | RepKeyHash
    | RepTimestamp
    | RepAddress
    | RepChainID
    | RepKey
    | RepSignature
    | RepOperation
    | RepContract
    (*| RepLambda (rep, rep)
    | RepNever (* from 008 *)
    | RepBLS12_381_Fr (* from 008 *)
    | RepBLS12_381_G1 (* from 008 *)
    | RepBLS12_381_G2 (* from 008 *)
    | RepSapling_state (RepInt) (* from 008 *)
    | RepSapling_transaction (RepInt) (* from 008 *)
    | RepTicket rep*)

  type param =
    | ParamString string
    | ParamNat int
    | ParamInt int
    (*| ParamBytes *)
    | ParamBool bool
    | ParamUnit unit
    | ParamList (list param)
    (* XXX fields and annots must be moved to t *)
    | ParamPair (list param)
    | ParamOption (option param)
    | ParamOr param
    | ParamSet (set param) (* comparable *)
    | ParamMap (map param param)
    (*| ParamBigMap *)
    | ParamMutez int
    | ParamKeyHash key_hash
    | ParamTimestamp timestamp
    | ParamAddress address
    | ParamChainID chain_id
    | ParamKey key
    | ParamSignature signature
    | ParamOperation operation
    | ParamContract contract
    (*| ParamLambda (rep, rep)
    | ParamNever (* from 008 *)
    | ParamBLS12_381_Fr (* from 008 *)
    | ParamBLS12_381_G1 (* from 008 *)
    | ParamBLS12_381_G2 (* from 008 *)
    | ParamSapling_state rep (* from 008 *)
    | ParamSapling_transaction rep (* from 008 *)
    | ParamTicket rep*)

  with contract = Self rep | Of_address rep address

  with operation = Transfer_tokens param tz contract
  with operations = list operation

  scope Contract

    type t = contract

    let function self (r:rep) : contract = Self r

    let function contract (r:rep) (addr:address) : option contract =
      returns { c -> match c with
                    | None -> true
                    | Some (Self r') -> r = r'
                    | Some (Of_address r' addr') -> r = r' && addr = addr' end }
      if any bool then Some (Of_address r addr) else None

    let address (c:contract) : address =
      raises { Fail -> match c with Self _ -> true | Of_address _ _ -> false end}
      match c with
      | Self _ -> failwith ()
      | Of_address _ a -> a
      end

  end

  let rec function typecheck (r:rep) (p:param) : bool
    variant { p }
    = match r, p with
    | RepString, ParamString _ -> true
    | RepNat, ParamNat _ -> true
    | RepInt, ParamInt _ -> true
    (*| RepBytes*)
    | RepBool, ParamBool _ -> true
    | RepUnit, ParamUnit _ -> true
    | RepList r0, ParamList p0 ->
      match p0 with
      | Nil -> true
      | Cons x xs -> typecheck r0 x && typecheck (RepList r0) (ParamList xs)
      end
    (* XXX fields and annots must be moved to t *)
    | RepPair (Cons r0 (Cons r1 Nil)), ParamPair (Cons p0 (Cons p1 Nil)) ->
      typecheck r0 p0 && typecheck r1 p1
    (*| TyPairN of (string option * t) list (* length > 2 *) (* XXX We now need pair compaction somewhere else *)*)
    | RepOption _, ParamOption (None) -> true
    | RepOption r0, ParamOption (Some p0) -> typecheck r0 p0
    | RepOr (Cons r rs), ParamOr p ->
      typecheck r p || typecheck (RepOr rs) (ParamOr p)
    | RepSet r0 (* comparable *), ParamSet (Set p0) ->
      match p0 with
      | Nil -> true
      | Cons x xs -> typecheck r0 x && typecheck (RepSet r0) (ParamSet (Set xs))
      end
    | RepMap r0 (* comparable *) r1, ParamMap (Map p0) ->
      match p0 with
      | Nil -> true
      | Cons (x, y) xs -> typecheck r0 x && typecheck r1 y && typecheck (RepMap r0 r1) (ParamMap (Map xs))
      end
    (*| RepBigMap (rep (* comparable *), rep)*)
    | RepMutez, ParamMutez _ -> true
    | RepKeyHash, ParamKeyHash _ -> true
    | RepTimestamp, ParamTimestamp _ -> true
    | RepAddress, ParamAddress _ -> true
    | RepChainID, ParamChainID _ -> true
    | RepKey, ParamKey _ -> true
    | RepSignature, ParamSignature _ -> true
    | RepOperation, ParamOperation _ -> true
    | RepContract, ParamContract _ -> true
    (*| RepLambda (rep, rep)
    | RepNever (* from 008 *)
    | RepBLS12_381_Fr (* from 008 *)
    | RepBLS12_381_G1 (* from 008 *)
    | RepBLS12_381_G2 (* from 008 *)
    | RepSapling_state (RepInt) (* from 008 *)
    | RepSapling_transaction (RepInt) (* from 008 *)
    | RepTicket rep*)
    | _, _ -> false
    end

  scope Operation

    type t = operation

    let function transfer_tokens (p:param) (t:tz) (c:contract) : operation
      requires { match c with Self r -> typecheck r p | Of_address r _ -> typecheck r p end }
    = Transfer_tokens p t c

  end

  scope Env

    type t = { env_now : timestamp; env_amount : tz; env_source : address; env_sender : address }

    let now (env: t) : timestamp =
      env_now env

    let amount (env: t) : tz =
      env_amount env

    let source (env: t) : address =
      env_source env

    let sender (env: t) : address =
      env_sender env

  end

  scope Global

    let function get_now (env : Env.t) : timestamp
    = Env.env_now env

    let function get_amount (env : Env.t) : tz
    = Env.env_amount env

    let function get_source (env : Env.t) : address
    = Env.env_source env

    let function get_sender (env : Env.t) : address
    = Env.env_sender env

  end

  scope Obj

  let function pack (a:'a) : bytes = Bytes ""

  end

end

(*module Stdlib

  type const 'a = 'a

  type ocaml_int = int
  type ocaml_string = string

  type nat = Nat (const ocaml_int)
  type tz = Tz (const int)

  use export ocaml.Exceptions

  let invalid_arg (s: string)
    raises  { Invalid_argument }
    returns { _ -> false }
  = raise (Invalid_argument s)

  use export option.Option

  scope Option

    let function value (o: option 'a) (a: 'a) : 'a = match o with Some a -> a | None -> a end

    let get (o: option 'a) : 'a
      ensures { not is_none o -> match o with None -> false | Some a -> result = a end }
      raises  { Invalid_argument _ -> is_none o }
    = match o with Some a -> a | None -> invalid_arg "Option.get" end

    let function map (o: option 'a) (f: 'a -> 'b) : option 'b = match o with Some a -> Some (f a) | None -> None end

  end

  type ('a, 'b) sum = Left of 'a | Right of 'b [@@deriving typerep]

  scope Sum
    type ('a, 'b) t = ('a, 'b) sum = Left of 'a | Right of 'b
    [@@deriving typerep]

    let get_left = function Left a -> a | _ -> invalid_arg "Sum.get_left"

    let get_right = function Right a -> a | _ -> invalid_arg "Sum.get_right"
  end

end*)
